<?php

declare(strict_types=1);

namespace PCIT\Pustomize\PullRequest;

use App\Build;
use App\GetAccessToken;
use PCIT\GetConfig;
use PCIT\GPI\Webhooks\Context\PullRequestContext;
use PCIT\Pustomize\Interfaces\PullRequest\HandlerInterface;
use PCIT\Skip;
use PCIT\Subject;
use PCIT\UpdateUserInfo;
use Symfony\Component\Yaml\Exception\ParseException;

class Handler implements HandlerInterface
{
    /** @var PullRequestContext */
    public $context;

    public function handle(PullRequestContext $context): void
    {
        // 处理 pr open 发送提示
        // 处理外部发起的 pr，内部 pr 由 check_suite 处理
        if (!\in_array($context->action, ['opened', 'synchronize'])) {
            return;
        }

        $this->context = $context;

        if (\in_array($context->action, ['opened', 'open'])) {
            $this->sendComment(null);
        }

        $git_type = $context->git_type;

        if ('github' === $git_type and $context->internal) {
            \Log::info('Handle GitHub internal pull_request by check_suite, skip');

            return;
        }

        $repository = $context->repository;

        $installation_id = $context->installation->id;
        $action = $context->action;
        $rid = $repository->id;
        $repo_full_name = $repository->full_name;
        $commit_id = $context->commit_id;
        $event_time = $context->event_time;
        $commit_message = $context->commit_message;
        $committer_username = $context->committer_username;
        $committer_uid = $context->committer_uid;
        $pull_request_number = $context->pull_request_number;
        $branch = $context->branch;
        $internal = $context->internal;
        $pull_request_source = $context->pull_request_source;
        $owner = $context->owner;
        $default_branch = $repository->default_branch;
        $private = $context->private;

        $subject = new Subject();

        $subject->register(new UpdateUserInfo(
            $owner,
            (int) $installation_id,
            (int) $rid,
            $repo_full_name,
            $default_branch,
            null,
            $repository->private ?? false,
            $git_type
        ));

        try {
            $config_array = $subject->register(
                new GetConfig($rid, $commit_id, $git_type)
            )->handle()->config_array;

            $config = json_encode($config_array);
        } catch (ParseException $e) {
            $config = $e->getMessage();
            $build_status = 'misconfigured';
        }

        $last_insert_id = Build::insertPullRequest(
            $event_time,
            $action,
            $commit_id,
            $commit_message,
            (int) $committer_uid,
            $committer_username,
            $pull_request_number,
            $branch,
            $rid,
            $config,
            $internal,
            $pull_request_source,
            $private,
            $git_type
        );
        if ($build_status ?? false) {
            Build::updateBuildStatus($last_insert_id, $build_status);

            return;
        }
        $subject->register(
            new Skip($commit_message, (int) $last_insert_id, $branch, $config)
        )
            ->handle();

        \Storage::put('pcit/events/'.$git_type.'/'.$last_insert_id.'/event.json', $context->raw);

        if (!\in_array($context->action, ['opened', 'open'])) {
            return;
        }

        $this->sendComment($comment_body);
    }

    private function sendComment(?string $comment_body = null): void
    {
        $comment_body = <<<'EOF'
Repo administrator can comment `/LGTM` or `/LGTM <type>`, I will merge this Pull_request.

> /LGTM
> /LGTM rebase
> /LGTM squash

---

This Comment has been generated by [PCIT Bot](https://github.com/pcit-ce/pcit).

EOF;

        $access_token = GetAccessToken::byRid($this->context->repository->id, $this->context->git_type);

        \PCIT::git($this->context->git_type, $access_token)
            ->issue_comments
            ->create(
                $this->context->repository->full_name,
                (int) $this->context->pull_request_number,
                $comment_body
            );
    }
}
